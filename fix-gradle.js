const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß Diagn√≥stico e Corre√ß√£o do Gradle Build');
console.log('==========================================\n');

// Verificar se estamos na pasta correta
if (!fs.existsSync('android')) {
  console.log('‚ùå Pasta android n√£o encontrada!');
  console.log('Execute primeiro: expo prebuild');
  process.exit(1);
}

console.log('‚úÖ Pasta android encontrada');

// Verificar Java
try {
  const javaVersion = execSync('java --version', { encoding: 'utf8' });
  console.log('‚úÖ Java encontrado:');
  console.log(javaVersion.split('\n')[0]);
} catch (error) {
  console.log('‚ùå Java n√£o encontrado ou n√£o est√° no PATH');
  console.log('Instale Java 11 ou 17 e configure JAVA_HOME');
}

// Verificar Android SDK
try {
  const androidHome = process.env.ANDROID_HOME || process.env.ANDROID_SDK_ROOT;
  if (androidHome) {
    console.log(`‚úÖ ANDROID_HOME: ${androidHome}`);
    
    // Verificar se existe
    if (fs.existsSync(androidHome)) {
      console.log('‚úÖ Android SDK encontrado');
    } else {
      console.log('‚ùå Android SDK n√£o encontrado no caminho especificado');
    }
  } else {
    console.log('‚ùå ANDROID_HOME n√£o configurado');
    console.log('Configure a vari√°vel de ambiente ANDROID_HOME');
  }
} catch (error) {
  console.log('‚ùå Erro ao verificar Android SDK');
}

// Verificar Gradle
try {
  const gradleVersion = execSync('cd android && ./gradlew --version', { encoding: 'utf8' });
  console.log('‚úÖ Gradle encontrado:');
  console.log(gradleVersion.split('\n')[0]);
} catch (error) {
  console.log('‚ùå Gradle n√£o encontrado ou erro ao executar');
}

console.log('\nüõ†Ô∏è Solu√ß√µes Recomendadas:');
console.log('1. Limpar cache do Gradle:');
console.log('   cd android && ./gradlew clean');
console.log('   cd android && ./gradlew --stop');
console.log('');
console.log('2. Verificar permiss√µes (Linux/Mac):');
console.log('   chmod +x android/gradlew');
console.log('');
console.log('3. Reinstalar depend√™ncias:');
console.log('   rm -rf node_modules');
console.log('   npm install');
console.log('');
console.log('4. Usar EAS Build (alternativa):');
console.log('   npm install -g @expo/eas-cli');
console.log('   eas login');
console.log('   npm run build:dev');
console.log('');
console.log('5. Verificar vers√£o do Java:');
console.log('   - Use Java 11 ou 17');
console.log('   - Configure JAVA_HOME');
console.log('');
console.log('6. Verificar Android SDK:');
console.log('   - Instale Android Studio');
console.log('   - Configure ANDROID_HOME');
console.log('   - Instale SDK 33 ou 34');

console.log('\nüéØ Para testar o deep linking ap√≥s resolver:');
console.log('1. Reinstale o app');
console.log('2. Teste com: https://skyvenda.com/auth/success?token=test123&id=15');
console.log('3. Verifique os logs no console');
